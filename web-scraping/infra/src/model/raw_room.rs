use domain::model::{Jst, RawRoom};
use sqlx::{types::chrono::NaiveDateTime, FromRow};

#[derive(FromRow, Debug)]
pub struct RawRoomRecord {
    pub url: String,
    pub suumo_code: String,
    pub building_name: String,
    pub rental_fee: String,
    pub management_fee: String,
    pub security_deposit: String,
    pub key_money: String,
    pub guarantee_deposit: String,
    pub key_money_amortization: String,
    pub location: String,
    pub walk_to_station: String,
    pub floor_plan: String,
    pub floor_plan_details: String,
    pub private_area: String,
    pub age_in_years: String,
    pub age_in_months: String,
    pub floor: String,
    pub number_of_floors: String,
    pub facing_direction: String,
    pub building_type: String,
    pub features: String,
    pub structure: String,
    pub damage_insurance: String,
    pub parking: String,
    pub move_in: String,
    pub transaction_type: String,
    pub conditions: String,
    pub property_code: String,
    pub info_update_date: String,
    pub next_update_date: String,
    pub contract_period: String,
    pub notes: String,
    pub scraping_date: NaiveDateTime,
}

impl From<RawRoom> for RawRoomRecord {
    fn from(room: RawRoom) -> Self {
        Self {
            url: room.url().to_string(),
            suumo_code: room.suumo_code().to_string(),
            building_name: room.building_name().to_string(),
            rental_fee: room.rental_fee().to_string(),
            management_fee: room.management_fee().to_string(),
            security_deposit: room.security_deposit().to_string(),
            key_money: room.key_money().to_string(),
            guarantee_deposit: room.guarantee_deposit().to_string(),
            key_money_amortization: room.key_money_amortization().to_string(),
            location: room.location().to_string(),
            walk_to_station: room.walk_to_station().to_string(),
            floor_plan: room.floor_plan().to_string(),
            floor_plan_details: room.floor_plan_details().to_string(),
            private_area: room.private_area().to_string(),
            age_in_years: room.age_in_years().to_string(),
            age_in_months: room.age_in_months().to_string(),
            floor: room.floor().to_string(),
            number_of_floors: room.number_of_floors().to_string(),
            facing_direction: room.facing_direction().to_string(),
            building_type: room.building_type().to_string(),
            features: room.features().to_string(),
            structure: room.structure().to_string(),
            damage_insurance: room.damage_insurance().to_string(),
            parking: room.parking().to_string(),
            move_in: room.move_in().to_string(),
            transaction_type: room.transaction_type().to_string(),
            conditions: room.conditions().to_string(),
            property_code: room.property_code().to_string(),
            info_update_date: room.info_update_date().to_string(),
            next_update_date: room.next_update_date().to_string(),
            contract_period: room.contract_period().to_string(),
            notes: room.notes().to_string(),
            scraping_date: room.scraping_date().naive_utc(),
        }
    }
}

impl TryFrom<RawRoomRecord> for RawRoom {
    type Error = anyhow::Error;
    fn try_from(record: RawRoomRecord) -> Result<Self, Self::Error> {
        Ok(Self::new(
            record.url,
            record.suumo_code,
            record.building_name,
            record.rental_fee,
            record.management_fee,
            record.security_deposit,
            record.key_money,
            record.guarantee_deposit,
            record.key_money_amortization,
            record.location,
            record.walk_to_station,
            record.floor_plan,
            record.floor_plan_details,
            record.private_area,
            record.age_in_years,
            record.age_in_months,
            record.floor,
            record.number_of_floors,
            record.facing_direction,
            record.building_type,
            record.features,
            record.structure,
            record.damage_insurance,
            record.parking,
            record.move_in,
            record.transaction_type,
            record.conditions,
            record.property_code,
            record.info_update_date,
            record.next_update_date,
            record.contract_period,
            record.notes,
            Jst::from_utc_datetime(&record.scraping_date),
        ))
    }
}
